public class LinkedinController{
    
    public Boolean isCode { get; set; }
    public String authCodeFromURL { get; set; }
    public List<LinkedIn_Information__c> linkedlnInfoList { get; set; }
    public String BasicInfo { get; set; }
    public String urlToSharedPost { get; set; }
    public String sharedInformation { get; set; }
    
    public Final String consumerKey = '78fky05ecc17ae'; // Your Client Id here
    public Final String consumerSecret ='iAOrYujPgX8rFWj0'; // Your Client Secr
    public Final String redirect_URI = 'https://pcomm-dev-ed--c.na50.visual.force.com/apex/LinkedinVF?core.apexpages.request.devconsole=1'; // VF page preview URL
    public String linkedln_Scope = 'r_fullprofile%20r_emailaddress';
    public Final String linkedln_AuthUrl = 'https://www.linkedin.com/oauth/v2/authorization?';
    public Final String accessToken_Endpoint = 'https://www.linkedin.com/uas/oauth/v2/accessToken';
    public string access_token = 'AQVFXHEPDKilCikyfnGfcfnpsVG4L5Ajbo72VC_LrvAfCSETewzrfkUREAVJbnk-oSkXellaUrAYCHgqevay6OQoRM8ncc6oWCVekbI0eAmfh62L1cUqjq93JViOtc4AR_Yp0zorXMe0nhnfiUSNA2D6qrwy1vC-5hbOGf08dC7zeiU8Iar-EuwE6d9QE5BzoGbbs9lclddtJ7PCv-v8YmTW-vA8MhgkLN1TZ_A0IeXnEhVtqttB-74UHGMtKozt7u0CsOrO9p8Pe7wh2SfxWCbyrJ6MTxDUGtgOqRZrKrmb_9hisbAyifd-BTI7VyJ0MFZMrhf9TV55jW8aoTPRXoqbhE041g';
    
    
    public LinkedinController(){
        authCodeFromURL = ApexPages.currentPage().getParameters().get('code');
        if(authCodeFromURL == null || authCodeFromURL == '')
            isCode = true;
        else
            isCode = false;
        
        linkedlnInfoList = [Select Id, Name,Access_Token__c,Expires_In_Seconds__c From LinkedIn_Information__c Where Name='LinkedlnInfo'];
        
    }
    
    public PageReference doGetAuthorizationCode(){
        String requestoAuthURL = linkedln_AuthUrl +'response_type=code&client_id='+consumerKey+'&redirect_uri='+redirect_URI+
            '&state=DCEeFWf45A53sdfKef424';
        PageReference pageRef = new PageReference(requestoAuthURL);
        return pageRef;
    }
    
    public void doGetAccessToken(){
        
        Http http = new Http();
        HttpRequest httpReq = new HttpRequest();
        HttpResponse httpRes = new HttpResponse();
        String test = '{"code":"'+authCodeFromURL+'","grant_type":"authorization_code","client_id":"78fky05ecc17ae","client_secret":"iAOrYujPgX8rFWj0","redirect_urls": "https://pcomm-dev-ed--c.na50.visual.force.com/apex/LinkedinVF?core.apexpages.request.devconsole=1"}';
        
        String requestTokenBody = 'https://www.linkedin.com/uas/oauth2/accessToken?' +
            'grant_type=authorization_code' +
            '&code=' + authCodeFromURL +
            '&redirect_uri=' + redirect_URI +
            '&client_id=' + consumerKey +
            '&client_secret=' + consumerSecret;
        
        String errorMessage = '';
        
        System.debug('#### authCodeFromURL '+authCodeFromURL);
        System.debug('#### requestTokenBody '+requestTokenBody);
        
        httpReq.setMethod('POST');
        httpReq.setEndpoint(requestTokenBody);
        httpReq.setHeader('Content-Type','application/x-www-form-urlencoded');
        //  httpReq.setBody(requestTokenBody);
        
        try{
            httpRes = http.send(httpReq);
            system.debug('status '+httpRes.getStatusCode());
            if(httpRes.getStatusCode() == 200){
                
                Map<String,object> TokenInfo = (Map<String,object>)JSON.deserializeUntyped(httpRes.getBody());
                
                LinkedIn_Information__c linkedlnInfo = new LinkedIn_Information__c();
                linkedlnInfo.Access_Token__c =  String.valueOf(TokenInfo.get('access_token'));
                linkedlnInfo.Expires_In_Seconds__c =  Double.valueOf(TokenInfo.get('expires_in'));
                linkedlnInfo.Name ='LinkedlnInfo';
                
                if(linkedlnInfoList!=null && linkedlnInfoList.size() > 0){
                    linkedlnInfo.Id = linkedlnInfoList[0].Id;
                }
                
                ApexPages.addmessage(new ApexPages.message(ApexPages.severity.CONFIRM, 
                                                           'You have done successful Integration with Linkedln'));
                upsert linkedlnInfo;
                
            }else{
                errorMessage = 'Unexpected Error while communicating with LinkedIn API. '
                    +' and Status Code '+httpRes.getStatuscode();
                ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR, errorMessage));
            }
        }catch(System.Exception e){
            System.debug('#### Exception Occured '+e.getStackTraceString()+'  '+e.getMessage());
            if(String.valueOf(e.getMessage()).startsWith('Unauthorized endpoint')){
                errorMessage =  'Unauthorize endpoint: An Administer must go to Setup -> Administer -> Security Control ->'
                    +' Remote Site Setting and add '+' '+ accessToken_Endpoint +' Endpoint';
                ApexPages.addMessage(new ApexPages.message(ApexPages.severity.ERROR, errorMessage));
            }else{
                errorMessage = 'Unexpected Error while communicating with LinkedIn API. '
                    +' and Status Code '+httpRes.getStatuscode();
                ApexPages.addMessage(new ApexPages.message(ApexPages.severity.ERROR, errorMessage));
            }
        }
    }
    
    public void fetchUserDetails(){
        HttpRequest httpReq  = new HttpRequest();
        Http http            = new Http();
        HttpResponse httpRes = new HttPResponse();
        
        try{
        httpReq.setMethod( 'GET' );
        httpReq.setEndpoint( 'https://api.linkedin.com/v1/people/~?format=json' );
        List<LinkedIn_Information__c> accesstokenList = [Select Access_Token__c from LinkedIn_Information__c where Name =: 'LinkedlnInfo'];
        String authorizationHeader = 'Bearer '+accesstokenList[0].Access_Token__c;
        httpReq.setHeader('Authorization', authorizationHeader);
        
        httpRes = http.send( httpReq );
        System.debug(httpRes.getBody());
        system.debug('status Code '+httpRes.getStatusCode());
        if(httpRes.getStatusCode()==200){
            Map<String, Object> results = (Map<String, Object>)JSON.deserializeUntyped(httpRes.getBody());
            System.debug('result '+results);
            String firstName = (String)results.get('firstName');
            String lastName = (String)results.get('lastName');
            String Title = (String)results.get('headline');
            List<Linkedin_Information__c> linkedlnInfo = [Select Id, Name,Access_Token__c,Expires_In_Seconds__c From LinkedIn_Information__c Where Name='LinkedlnInfo'];
            List<Linkedin_Information__c> updateLinkedinUserDetails = new List<Linkedin_Information__c>();
            Linkedin_Information__c li = new Linkedin_Information__c();
            for(Linkedin_Information__c lin : linkedlnInfo){
                lin.First_Name__c = firstName;
                lin.Last_Name__c = lastName;
                lin.Title__c = Title;
                updateLinkedinUserDetails.add(lin);
            }
            if(!updateLinkedinUserDetails.isEmpty()){
                system.debug('going to update');
                update updateLinkedinUserDetails;
                ApexPages.addmessage(new ApexPages.message(ApexPages.severity.CONFIRM, 'Basic info has been updated successfully!!'));
            }
        }
        else{
            String errorMessage = 'Unexpected Error while communicating with LinkedIn API. '
                +'Status '+httpRes.getStatus()+' and Status Code '+httpRes.getStatuscode();
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR, errorMessage));
        }
        }
        catch(System.Exception e){
            System.debug('#### Exception Occured '+e.getStackTraceString()+'  '+e.getMessage());
            if(String.valueOf(e.getMessage()).startsWith('List index out of bounds')){
               String errorMessage =  'User did not allow to access the basic information';
                ApexPages.addMessage(new ApexPages.message(ApexPages.severity.ERROR, errorMessage));
            }else{
               String errorMessage = 'Unexpected Error while communicating with LinkedIn API. '
                    +' and Status Code '+httpRes.getStatuscode();
                ApexPages.addMessage(new ApexPages.message(ApexPages.severity.ERROR, errorMessage));
            }
        }
    }
    
    
}